import { GridBounds, GridGet, GridSet } from "./grid";
import { Grid } from "./types";

/** Exports a grid in AZ format */
export function ExportGrid(grid: Grid): string {
  let rowStrs: string[] = [];
  const bounds = GridBounds(grid);
  for (let row = bounds.row.min; row <= bounds.row.max; row++) {
    let rowStr = "(";

    let isCountingZeroes = true;
    let currentZeros = 0;
    let currentNumbers: number[] = [];
    let isFirst = true;
    for (let col = bounds.col.min; col <= bounds.col.max; col++) {
      const value = GridGet(grid, row, col);
      if (!value) {
        if (isCountingZeroes) {
          currentZeros++;
          continue;
        }

        // print list of current numbers
        rowStr += currentNumbers.join(", ");
        currentNumbers = [];

        isCountingZeroes = true;
        currentZeros = 1;
        continue;
      }

      if (isCountingZeroes) {
        if (!isFirst) rowStr += " / ";
        if (isFirst) isFirst = false;
        // we reached the end of the zeros, so append the number with a preceding slash
        rowStr += `${currentZeros}: `;
        isCountingZeroes = false;
        currentZeros = 0;
        currentNumbers = [];
      }

      currentNumbers.push(value);
    }

    rowStr += currentNumbers.join(", ");
    rowStr += ")";
    rowStrs.push(rowStr);
  }

  return rowStrs.join(", ");
}

/** Imports a grid in AZ format */
export function ImportGrid(str: string): Grid {
  const grid: Grid = [];
  const rows = str
    .split("(")
    .filter((s) => s)
    .map((row) => row.split(")")[0]);

  // each row is like: "0: 12, 8, 3, 2 / 1: 16"

  // numbers before : are counts of zeros
  // numbers before , are individual cells
  // trim any white space
  rows.forEach((row, r) => {
    grid[r] = [];

    // index in the grid
    let gridRowIndex = 0;
    let currentBuffer = "";
    for (const char of row) {
      // ignore white space
      if (char == " ") continue;

      // we found leading zeroes!
      if (char == ":") {
        const zeroes = Number(currentBuffer.trim());
        for (let z = 0; z < zeroes; z++) {
          grid[r][gridRowIndex] = 0;
          gridRowIndex++;
        }
        currentBuffer = "";
        continue;
      }

      // we found a single number
      if (char == "," || char == "/") {
        grid[r][gridRowIndex] = Number(currentBuffer.trim());
        gridRowIndex++;
        currentBuffer = "";
        continue;
      }

      currentBuffer += char;
    }

    grid[r][gridRowIndex] = Number(currentBuffer.trim());
  });

  return grid;
}

// Simple dot format
export function ImportDotFormat(str: string): Grid {
  const grid: Grid = [];
  const rows = str.split("\n").filter((s) => s);
  rows.forEach((row_arr, row) => {
    const elements = row_arr.split(" ").filter((s) => s);
    elements.forEach((s, col) => {
      const value = Number(s);
      if (!value || isNaN(value)) return;
      GridSet(grid, row, col, value);
    });
  });

  return grid;
}

/**n=2 gets 16 */
const n2_16 = `
 9  5 10 11  .  .
 .  4  1  .  .  .
12  8  3  2  . 16
 .  .  .  6  1 15
 .  .  13 7 14  .`;

/** n=4 with max 38 */
const n4_38 = `
.  .  .  .  .  .  .  .  .  .  .  .  .  .  .

. 35 18 36  . 23  . 21  . 32  .  .  .  .  .

.  . 17  1  . 14  9  . 12 20  .  .  .  .  .

.  . 34 16 15  .  5  4  8  .  . 26 27  .  .

.  .  .  . 31  . 10  1  3 19 25  .  1 28  .

.  .  .  .  .  . 11  .  2  6  . 33  . 29  .

.  .  .  .  .  . 24 13 22  1  7  .  .  .  .

.  .  .  .  .  . 37  .  . 30 38  .  .  .  .

.  .  .  .  .  .  .  .  .  .  .  .  .  .  . `;

/** n=6 with max of 60 */
const n6_60 = `
.  .  .  .  .  .  .  .  .  .  .  .  . 47 24 48  .

.  .  .  .  .  .  .  .  .  .  .  .  .  . 23  1 49

.  .  .  .  .  .  .  .  .  .  .  . 41  . 22  . 50

.  .  .  .  .  .  .  . 51  . 36  . 20 21 43  .  .

.  .  .  .  .  .  .  . 34 17  . 19  1  .  .  .  .

.  .  .  .  .  .  .  . 16  1 18 38 58 59  .  .  .

.  .  .  .  . 37 30 15 40  . 57  .  .  .  .  .  .

.  .  .  .  .  .  7  8  .  .  .  .  .  .  .  .  .

.  .  . 35 46  6  1 25 33  .  .  .  .  .  .  .  .

. 60 32  .  3  2  9  .  .  .  .  .  .  .  .  .  .

.  . 28  4  1 31 11 45  . 52  .  .  .  .  .  .  .

. 42 14 10  5  .  . 12 13 39  .  .  .  .  .  .  .

. 56  . 29 44  .  .  1 26  .  .  .  .  .  .  .  .

.  .  .  .  .  . 55 54 27 53  .  .  .  .  .  .  . `;

export const N2_GRID = () => ImportDotFormat(n2_16);
export const N4_GRID = () => ImportDotFormat(n4_38);
export const N6_GRID = () => ImportDotFormat(n6_60);

const sheet_grids = [
  `(9: 97), (9: 96, 1 / 5: 87), (10: 95, 94 / 3: 88, 1, 86), (12: 93 / 2: 89 / 1: 85), (12: 92, 1, 90 / 3: 84), (13: 91 / 4: 83, 1), (18: 82), (17: 81), (17: 80, 1), (17: 79 / 1: 77), (18: 78 / 1: 76), (19: 1, 75), (19: 74), (14: 53, 27, 54, 55 / 2: 73), (15: 26, 1 / 2: 44, 29 / 1: 56, 98), (14: 39, 13, 12 / 2: 5, 10, 14, 42), (14: 52 / 1: 45, 11, 31, 1, 4, 28), (17: 9, 2, 3 / 1: 32, 60, 61, 62), (15: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (16: 8, 7 / 5: 65, 64), (13: 57 / 1: 40, 15, 30, 37 / 2: 1, 66), (10: 59, 58, 38, 18, 1, 16 / 4: 68, 67), (11: 1, 19 / 1: 17, 34 / 3: 69), (9: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (4: 101, 100, 99, 49, 1, 23), (3: 102, 1 / 3: 48, 24, 47), (0: 107 / 2: 103), (0: 106, 1, 104), (1: 105)`,
  `(11: 97), (11: 96, 1 / 5: 87), (12: 95, 94 / 3: 88, 1, 86), (14: 93 / 2: 89 / 1: 85), (14: 92, 1, 90 / 3: 84), (15: 91 / 4: 83, 1), (20: 82), (19: 81), (19: 80, 1), (19: 79 / 1: 77), (20: 78 / 1: 76), (21: 1, 75), (21: 74), (16: 53, 27, 54, 55 / 2: 73), (17: 26, 1 / 2: 44, 29 / 1: 56, 98), (16: 39, 13, 12 / 2: 5, 10, 14, 42), (16: 52 / 1: 45, 11, 31, 1, 4, 28), (19: 9, 2, 3 / 1: 32, 60, 61, 62), (17: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (18: 8, 7 / 5: 65, 64), (15: 57 / 1: 40, 15, 30, 37 / 2: 1, 66), (12: 59, 58, 38, 18, 1, 16 / 4: 68, 67), (13: 1, 19 / 1: 17, 34 / 3: 69), (11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (0: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (1: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (1: 108 / 3: 102, 1 / 3: 48, 24, 47), (2: 107 / 2: 103), (2: 106, 1, 104), (3: 105)`,
  `(13: 97), (13: 96, 1 / 5: 87), (14: 95, 94 / 3: 88, 1, 86), (16: 93 / 2: 89 / 1: 85), (16: 92, 1, 90 / 3: 84), (17: 91 / 4: 83, 1), (22: 82), (21: 81), (21: 80, 1), (21: 79 / 1: 77), (22: 78 / 1: 76), (23: 1, 75), (23: 74), (18: 53, 27, 54, 55 / 2: 73), (19: 26, 1 / 2: 44, 29 / 1: 56, 98), (18: 39, 13, 12 / 2: 5, 10, 14, 42), (18: 52 / 1: 45, 11, 31, 1, 4, 28), (21: 9, 2, 3 / 1: 32, 60, 61, 62), (19: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (20: 8, 7 / 5: 65, 64), (17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66), (0: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67), (1: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69), (1: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (2: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (3: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (3: 108 / 3: 102, 1 / 3: 48, 24, 47), (4: 107 / 2: 103), (4: 106, 1, 104), (5: 105)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (24: 80, 1), (24: 79 / 1: 77), (25: 78 / 1: 76), (26: 1, 75), (26: 74), (21: 53, 27, 54, 55 / 2: 73), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104), (8: 105)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (24: 80, 1), (24: 79 / 1: 77), (25: 78 / 1: 76), (26: 1, 75), (26: 74), (21: 53, 27, 54, 55 / 2: 73), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (17: 124, 123)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (24: 80, 1), (24: 79 / 1: 77), (25: 78 / 1: 76), (26: 1, 75), (25: 130, 74), (21: 53, 27, 54, 55 / 2: 73), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (24: 80, 1), (24: 79 / 1: 77), (25: 78 / 1: 76), (26: 1, 75), (22: 134 / 3: 74), (21: 53, 27, 54, 55 / 2: 73), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16, 135 / 1: 136 / 1: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (24: 80, 1), (20: 137 / 3: 79 / 1: 77), (19: 138, 1, 136 / 3: 78 / 1: 76), (19: 139 / 1: 135 / 4: 1, 75), (22: 134 / 3: 74), (21: 53, 27, 54, 55 / 2: 73), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (24: 80, 1), (20: 137 / 3: 79 / 1: 77), (19: 138, 1, 136 / 3: 78 / 1: 76), (16: 143 / 2: 139 / 1: 135 / 4: 1, 75), (16: 142, 1, 140 / 3: 134 / 3: 74), (17: 141 / 3: 53, 27, 54, 55 / 2: 73), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (14: 146 / 9: 80, 1), (13: 147, 1, 145 / 4: 137 / 3: 79 / 1: 77), (13: 148 / 1: 144 / 3: 138, 1, 136 / 3: 78 / 1: 76), (16: 143 / 2: 139 / 1: 135 / 4: 1, 75), (16: 142, 1, 140 / 3: 134 / 3: 74), (17: 141 / 3: 53, 27, 54, 55 / 2: 73), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3, 149, 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 17: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (14: 146 / 9: 80, 1), (13: 147, 1, 145 / 4: 137 / 3: 79 / 1: 77), (11: 150 / 1: 148 / 1: 144 / 3: 138, 1, 136 / 3: 78 / 1: 76), (10: 151, 1, 149 / 3: 143 / 2: 139 / 1: 135 / 3: 153, 1, 75), (10: 152 / 5: 142, 1, 140 / 3: 134 / 3: 74), (17: 141 / 3: 53, 27, 54, 55 / 2: 73 / 2: 154), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (22: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (23: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 15: 155 / 1: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (14: 146 / 9: 80, 1), (13: 147, 1, 145 / 4: 137 / 3: 79 / 1: 77), (11: 150 / 1: 148 / 1: 144 / 3: 138, 1, 136 / 3: 78 / 1: 76), (10: 151, 1, 149 / 3: 143 / 2: 139 / 1: 135 / 3: 153, 1, 75), (10: 152 / 5: 142, 1, 140 / 3: 134 / 3: 74), (17: 141 / 3: 53, 27, 54, 55 / 2: 73 / 2: 154), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (16: 157 / 5: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (15: 158, 1, 156 / 5: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 12: 159 / 2: 155 / 1: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 12: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 12: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (14: 146 / 9: 80, 1), (13: 147, 1, 145 / 4: 137 / 3: 79 / 1: 77), (11: 150 / 1: 148 / 1: 144 / 3: 138, 1, 136 / 3: 78 / 1: 76), (10: 151, 1, 149 / 3: 143 / 2: 139 / 1: 135 / 3: 153, 1, 75), (10: 152 / 5: 142, 1, 140 / 3: 134 / 3: 74), (17: 141 / 3: 53, 27, 54, 55 / 2: 73 / 2: 154), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (24: 9, 2, 3 / 1: 32, 60, 61, 62), (16: 157 / 5: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (15: 158, 1, 156 / 5: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 9: 163 / 2: 159 / 2: 155 / 1: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 7: 162, 1, 160 / 2: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 7: 161 / 4: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (14: 146 / 9: 80, 1), (13: 147, 1, 145 / 4: 137 / 3: 79 / 1: 77), (11: 150 / 1: 148 / 1: 144 / 3: 138, 1, 136 / 3: 78 / 1: 76), (10: 151, 1, 149 / 3: 143 / 2: 139 / 1: 135 / 3: 153, 1, 75), (10: 152 / 5: 142, 1, 140 / 3: 134 / 3: 74), (17: 141 / 3: 53, 27, 54, 55 / 2: 73 / 2: 154), (22: 26, 1 / 2: 44, 29 / 1: 56, 98), (21: 39, 13, 12 / 2: 5, 10, 14, 42), (21: 52 / 1: 45, 11, 31, 1, 4, 28), (10: 167, 168 / 12: 9, 2, 3 / 1: 32, 60, 61, 62), (9: 166, 1 / 5: 157 / 5: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (10: 165, 164 / 3: 158, 1, 156 / 5: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 9: 163 / 2: 159 / 2: 155 / 1: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 7: 162, 1, 160 / 2: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 7: 161 / 4: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
  `(16: 97), (16: 96, 1 / 5: 87), (17: 95, 94 / 3: 88, 1, 86), (19: 93 / 2: 89 / 1: 85), (19: 92, 1, 90 / 3: 84), (20: 91 / 4: 83, 1), (25: 82), (24: 81), (14: 146 / 9: 80, 1), (13: 147, 1, 145 / 4: 137 / 3: 79 / 1: 77), (11: 150 / 1: 148 / 1: 144 / 3: 138, 1, 136 / 3: 78 / 1: 76), (10: 151, 1, 149 / 3: 143 / 2: 139 / 1: 135 / 3: 153, 1, 75), (10: 152 / 5: 142, 1, 140 / 3: 134 / 3: 74), (17: 141 / 3: 53, 27, 54, 55 / 2: 73 / 2: 154), (14: 172 / 7: 26, 1 / 2: 44, 29 / 1: 56, 98), (13: 1, 171 / 6: 39, 13, 12 / 2: 5, 10, 14, 42), (12: 169, 170 / 7: 52 / 1: 45, 11, 31, 1, 4, 28), (10: 167, 168 / 12: 9, 2, 3 / 1: 32, 60, 61, 62), (9: 166, 1 / 5: 157 / 5: 33, 25, 1, 6, 46, 35 / 3: 1, 63), (10: 165, 164 / 3: 158, 1, 156 / 5: 8, 7 / 5: 65, 64), (0: 118, 117, 116 / 9: 163 / 2: 159 / 2: 155 / 1: 57 / 1: 40, 15, 30, 37 / 2: 1, 66 / 1: 129 / 1: 131), (1: 1 / 1: 115, 114 / 7: 162, 1, 160 / 2: 59, 58, 38, 18, 1, 16 / 4: 68, 67 / 3: 130, 1, 132), (4: 1, 113 / 7: 161 / 4: 1, 19 / 1: 17, 34 / 3: 69 / 7: 133), (4: 112 / 11: 43, 21, 20 / 1: 36 / 1: 51 / 3: 1, 70), (5: 111, 110 / 7: 50 / 1: 22 / 1: 41 / 6: 72, 71), (6: 1, 109 / 3: 101, 100, 99, 49, 1, 23), (6: 108 / 3: 102, 1 / 3: 48, 24, 47), (7: 107 / 2: 103 / 5: 119), (7: 106, 1, 104 / 7: 120, 121), (8: 105 / 9: 1, 122), (15: 126 / 1: 124, 123), (14: 127, 1, 125), (14: 128)`,
];

/** Creates a list of some imported/submitted grids. These are suboptimal but could have interesting patterns */
export const GET_SOME_GRIDS = () => sheet_grids.map((s) => ImportGrid(s));
